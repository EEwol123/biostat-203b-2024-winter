---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: Zehan Hu 306329221
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
    eval: TRUE
---
/mnt/host/c/Users/12825/Documents/biostat-203b-2024-winter/mimic/
Display machine information for reproducibility:
```{r}

sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

Link:

https://www.citiprogram.org/verify/?k00e1566d-2354-4fcd-b6ec-4766f8818c5d-60799375
https://www.citiprogram.org/verify/?w188d6a54-fa9a-4484-b89d-965d83d93c5f-60799375

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
ls -l ~/mimic
```

Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

```{bash}

ls -l ~/mimic/hosp
```


```{bash}

ls -l ~/mimic/icu
```
Because the file in "csv.gz"form is smaller and compressed. So it wont use a lot of storage room

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

zcat: Similar to cat, it displays the contents of gzip-compressed files to the standard output. Useful for viewing compressed text files without decompressing them first.

zless: Works like less, allowing you to page through compressed text files one screen at a time. It's helpful for reading large compressed files without decompressing them entirely.

zmore: Similar to more, it lets you view compressed files page by page, but with less functionality compared to zless.

zgrep: Combines grep functionality with gzip compression, enabling you to search inside compressed files without decompressing them first.


4. (Looping in Bash) What's the output of the following bash script?
```{bash}

for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```

The script will match and list all files in ~/mimic/hosp/ directory that start with 'a', 'l', or 'pa' and end with '.gz'. It uses brace expansion to create a list of file patterns to match, namely a*.gz, l*.gz, and pa*.gz.

The output displayed in the image shows three files with their permissions, owner, group, size, modification date, and filename. These files appear to match the pattern specified in the Bash script:

admissions.csv.gz
labevents.csv.gz
patients.csv.gz
Each file is listed with the -l option of ls, which includes long format listing information.


Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

```{bash,eval=FALSE}
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  echo "$datafile:"
  zcat "$datafile" | wc -l
done
```
5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | head

```


```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | wc -l

```

```{bash}

zcat ~/mimic/hosp/patients.csv.gz | cut -d, -f2 | sort | uniq | wc -l


```



6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d, -f6 | sort | uniq -c


```

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d, -f8 | sort | uniq -c


```


```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d, -f10 | sort | uniq -c


```

```{bash}
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d, -f13 | sort | uniq -c


```


The admission_type variable in the MIMIC-IV database includes several categories. Some of these are 'ELECTIVE', 'URGENT', and various types of 'OBSERVATION' and 'EMERGENCY' admissions.


7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

```{bash}

ls -lh ~/mimic/hosp/labevents.csv.gz
```
```{bash,eval=FALSE}

gzip -dk ~/mimic/hosp/labevents.csv.gz
```

```{bash}

ls -lh ~/mimic/hosp/labevents.csv

```

```{bash,eval=FALSE}
zcat ~/mimic/hosp/labevents.csv.gz | wc -l
```

```{bash,eval=FALSE}
rm ~/mimic/hosp/labevents.csv.gz
```
Compressed files (gzip) take up significantly less storage space. 

Reading from a compressed file (zcat) is generally slower compared to an uncompressed file due to the time needed for decompression.
For one-time or infrequent access, zcat is efficient as it saves storage space without needing to store a large uncompressed file.
For frequent access to the data, especially random access, keeping an uncompressed version might be more efficient time-wise.

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}

wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.


The wget -nc command is used to download files from the internet. The -nc flag stands for "no-clobber", which means if a file with the same name already exists in the destination directory, it won't be overwritten. This is useful for avoiding duplicate downloads or preserving modifications to an existing file.
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o $char pg42671.txt | wc -l
done
```

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

echo 'hello, world' > test1.txt: This command uses the > operator, which redirects the output of the echo command to the file test1.txt. If test1.txt already exists, this command will overwrite the file with the new content ('hello, world'). If the file doesn't exist, it will create a new file named test1.txt containing the provided text.

echo 'hello, world' >> test2.txt: This command uses the >> operator, which appends the output of the echo command to the file test2.txt. If test2.txt already exists, the text 'hello, world' will be added to the end of the file, preserving its existing content. If the file doesn't exist, it will create a new file named test2.txt with the provided text.

In summary, > is used for overwriting (or creating a new file), while >> is used for appending to an existing file (or creating a new file if it doesn't exist).

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.


```{bash}
cal
```

```{bash}
cal 2024
```

```{bash}
cal 9 1752
```

```{bash}
date
```

```{bash}
hostname
```

```{bash}
arch
```

```{bash}
uname -a
```

```{bash}
uptime
```

```{bash}
who am i
```

```{bash}
who
```

```{bash}
w
```

```{bash}
id
```

```{bash}
last | head
```

```{bash}
echo {con,pre}{sent,fer}{s,ed}
```

```{bash}
time sleep 5
```

```{bash}
history | tail
```






## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

![](./book.png)