---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Zehan Hu"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.



```{r}
library(GGally)
library(gtsummary)
library(ranger)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(vip)
library(rpart.plot)
```



```{r}

mimiciv_icu_cohort<-readRDS("../hw4/mimiciv_shiny/mimic_icu_cohort.rds")

```





```{r}
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  select(subject_id, hadm_id, stay_id,
         "Non Invasive Blood Pressure diastolic"=
           "as.numeric(\"Non Invasive Blood Pressure diastolic\")",
         "Non Invasive Blood Pressure systolic"=
           "as.numeric(\"Non Invasive Blood Pressure systolic\")",
         "Heart Rate"="as.numeric(`Heart Rate`)",
         temperature_fahrenheit="as.numeric(`Temperature Fahrenheit`)",
         los_long, 
         insurance,
         language,
         marital_status,
         race,
         hospital_expire_flag,
         gender,
         sodium,
         chloride,
         creatinine,
         potassium,
         glucose,
         hematocrit,
         wbc,
         bicarbonate)
```

```{r}
# Assuming your data frame is named df

# Convert all character columns to factors
mimiciv_icu_cohort[] <- lapply(mimiciv_icu_cohort, 
                               function(x) if(is.character(x)) factor(x) else x)

mimiciv_icu_cohort$los_long<-as.factor(mimiciv_icu_cohort$los_long)

```




2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.


3. Train and tune the models using the training set.

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?


```{r}
#| eval: true
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```


```{r}
mimic_other <- training(data_split)%>%
  select(-subject_id, -hadm_id, -stay_id)

dim(mimic_other)
```

```{r}
mimic_test<-testing(data_split)%>%
  select(-subject_id, -hadm_id, -stay_id)
dim(mimic_test)

```


```{r}
sapply(mimic_other, class)
```


```{r}

norm_recipe <- 
  recipe(
    los_long ~ .,
    data = mimic_other
  ) %>%
  step_impute_mean(all_numeric(), -all_outcomes()) %>%
  # Impute categorical variables using KNN or another appropriate method
  step_impute_knn(all_nominal(), -all_outcomes()) %>%
  # Convert all nominal variables to dummy variables, excluding the outcome
  step_dummy(all_nominal(), -all_outcomes()) %>%
  # Remove zero variance predictors
  step_zv(all_numeric_predictors()) %>%
  # Normalize all numeric predictors
  step_normalize(all_numeric_predictors())


norm_recipe
```




### Random Forest



```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) %>% 
  set_engine("ranger", importance="impurity")%>%
set_mode("classification")
rf_mod

rf_wf <- workflow() %>%
  add_recipe(norm_recipe) %>%
  add_model(rf_mod)
rf_wf

param_grid <- grid_regular(
  trees(range = c(100L, 300L)), 
  mtry(range = c(1L, 5L)),
  levels = c(3, 5)
  )
param_grid
```



```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```



```{r}
rf_fit <- rf_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
rf_fit
```


```{r}
rf_fit %>%
  collect_metrics() %>%
  print(width = Inf) %>%
  filter(.metric == "roc_auc") %>%
  mutate(mtry = as.factor(mtry)) %>%
  ggplot(mapping = aes(x = trees, y = mean, color = mtry)) +
  # geom_point() + 
  geom_line() + 
  labs(x = "Num. of Trees", y = "CV AUC")
```

```{r}
rf_fit %>%
  show_best("roc_auc")
best_rf <- rf_fit %>%
  select_best("roc_auc")
best_rf
```


```{r}
# Final workflow
final_wf <- rf_wf %>%
  finalize_workflow(best_rf)
final_wf
# Fit the whole training set, then predict the test cases
final_fit <- 
  final_wf %>%
  last_fit(data_split)
final_fit
```

```{r}
# Test metrics
final_fit %>% 
  collect_metrics()
```

```{r}
final_tree <- extract_fit_engine(final_fit)

```

```{r}
vip(final_tree, num_features = 10)
```




### XG boosting


```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000, 
    tree_depth = tune(),
    learn_rate = tune()
  ) %>% 
  set_engine("xgboost", importance="impurity")%>%
set_mode("classification")
gb_mod
```


```{r}
gb_wf <- workflow() %>%
  add_recipe(norm_recipe) %>%
  add_model(gb_mod)
gb_wf
```


```{r}
param_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 10)
  )
param_grid
```


```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```

```{r}
gb_fit <- gb_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
gb_fit
```


```{r}
gb_fit %>%
  collect_metrics() %>%
  print(width = Inf) %>%
  filter(.metric == "roc_auc") %>%
  mutate(tree_depth = as.factor(tree_depth)) %>%
  ggplot(mapping = aes(x = learn_rate, y = mean, color = tree_depth)) +
  geom_point() +
  geom_line() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()
```


```{r}
gb_fit %>%
  show_best("roc_auc")
best_gb <- gb_fit %>%
  select_best("roc_auc")
best_gb
```


```{r}
# Final workflow
final_wf <- gb_wf %>%
  finalize_workflow(best_gb)
final_wf
# Fit the whole training set, then predict the test cases
final_fit <- 
  final_wf %>%
  last_fit(data_split)
final_fit
```


```{r}
# Test metrics
final_fit %>% 
  collect_metrics()
```





```{r}
final_tree <- extract_fit_engine(final_fit)
vip(final_tree, num_features = 10)
```

### Logistic regression




```{r}
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```
```{r}
logit_wf <- workflow() |>
  add_recipe(norm_recipe) |>
  add_model(logit_mod) |>
  print()
```

```{r}
param_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(100, 5)
  ) |>
  print()
```

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```

```{r}
logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
```






```{r}
logit_fit
```


```{r}
logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()
```

```{r}
logit_fit |>
  show_best("roc_auc")
```


```{r}
best_logit <- logit_fit |>
  select_best("roc_auc")
best_logit
```

```{r}
# Final workflow
final_wf <- logit_wf |>
  finalize_workflow(best_logit)
final_wf
```


```{r}
# Fit the whole training set, then predict the test cases
final_fit <- 
  final_wf |>
  last_fit(data_split)
final_fit
```


```{r}
# Test metrics
final_fit |> 
  collect_metrics()
```


```{r}
final_tree <- extract_fit_engine(final_fit)
vip(final_tree, num_features = 10)
```





### Model stacking

I used logistic regression,random forest and Neural network to build the model stacking. 

```{r}
#| eval: false
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = TRUE)
logit_mod
```
```{r}
#| eval: false
logit_wf <- workflow() |>
  add_recipe(norm_recipe) |>
  add_model(logit_mod)
logit_wf
```

```{r}
#| eval: false
logit_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(100, 5)
  )

logit_res <- 
  tune_grid(
    object = logit_wf, 
    resamples = folds, 
    grid = logit_grid,
    control = control_stack_grid()
  )
logit_res
```


```{r}
#| eval: false
rf_mod <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) |>
  set_engine("ranger")
rf_mod
```


```{r}
#| eval: false
rf_wf <- workflow() |>
  add_recipe(norm_recipe) |>
  add_model(rf_mod)
rf_wf
```


```{r}
#| eval: false
rf_grid <- grid_regular(
  trees(range = c(100L, 500L)), 
  mtry(range = c(1L, 5L)),
  levels = c(5, 5)
  )

rf_res <- 
  tune_grid(
    object = rf_wf, 
    resamples = folds, 
    grid = rf_grid,
    control = control_stack_grid()
  )
rf_res
```




```{r}
#| eval: false
library(gtsummary)
library(keras)
library(ranger)
library(stacks)
library(tidyverse)
library(yardstick)

```


```{r}
#| eval: false
mimic_model_st <- 
  # initialize the stack
  stacks() |>
  # add candidate members
  add_candidates(logit_res) |>
  add_candidates(rf_res) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc","accuracy")
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
```

```{r}
#| eval: false
mimic_model_st
```



For my 3 models, I used logistic regression,random forest and Xgboosting to build the model. The ROC and accuracy are as follows:


Random Forest: ROC: 0.6127845, Accuracy: 0.5836408		

Xgboosting: ROC: 0.6196825, Accuracy: 0.5866743	
	
Logistic regression: ROC: 0.5829731, Accuracy: 0.5664508		

As you can see, the relative performance of the models is similar. The Xgboosting model has the highest ROC and accuracy, followed by the random forest model. The logistic regression model has the lowest ROC and accuracy. As in the vip graph, the most important features relatively in predicting long ICU stays are "Heart Rate", "hematocrit".

For the stacking model, I chose logistic regression and random forest as the candidate members. The stacking model has a ROC of 0.6196825 and an accuracy of 0.5866743, which is similar to the Xgboosting model. The stacking model is a good choice because it combines the strengths of the individual models and has a similar performance to the Xgboosting model.


Overall, we should choose the Xgboosting model as the best model because it has the highest ROC and accuracy. The random forest model is also a good choice because it has a similar performance to the Xgboosting model and is more interpretable. The logistic regression model is the least desirable because it has the lowest ROC and accuracy.

