---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 9 @ 11:59PM
author: "Your NAME and UID"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: True    
---

Display machine information for reproducibility:
```{r }
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer
```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage.) 

Using read.csv (Base R):
```{r}

start.time <- Sys.time()
df_base <- read.csv("admissions.csv.gz")
end.time <- Sys.time()
time_base <- end.time - start.time

```


Using read_csv (Tidyverse):

```{r}
start.time <- Sys.time()
df_tidyverse <- read_csv("admissions.csv.gz")
end.time <- Sys.time()
time_tidyverse <- end.time - start.time

```

Using fread (data.table):

```{r}

start.time <- Sys.time()
df_datatable <- fread("admissions.csv.gz")
end.time <- Sys.time()
time_datatable <- end.time - start.time


```


To compare the execution times:

```{r}
print(time_base)
print(time_tidyverse)
print(time_datatable)

```
Speed: Fread from data.table is faster than read.csv and read_csv due to its efficient file-reading algorithms, especially for large datasets.


To compare the data types:
```{r}
str(df_base)
str(df_tidyverse)
str(df_datatable)


```
To measure memory usage:

```{r}
size_base <- object_size(df_base)
size_tidyverse <- object_size(df_tidyverse)
size_datatable <- object_size(df_datatable)

print(size_base)
print(size_tidyverse)
print(size_datatable)


```
Data frames from data.table (fread) are more memory-efficient compared to base R data frames and tibbles from the tidyverse, which means they are the smallest.





### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)


```{r}
library(readr)

# Define the column types, assuming you know the structure.
# This is a hypothetical example; adjust the string according to your actual data structure.
col_types_example <- "iccd"  # Adjust this based on your actual data

# Measure the time and read the file
start.time <- Sys.time()
df_custom_types <- read_csv("admissions.csv.gz", col_types = col_types_example)
end.time <- Sys.time()
time_custom_types <- end.time - start.time

# Print the time taken
print(time_custom_types)


```

It changed, it used to be1.32sec, now is 1.21sec



```{r}

# Measure memory usage of the dataframe
size_custom_types <- object_size(df_custom_types)

# Print the memory usage
print(size_custom_types)
```
It used 115.15MB

## Q2. Ingest big data files

<p align="center">
  <img src="./bigfile.png" width="50%">
</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 125x bigger than `admissions.csv.gz`.
```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```
Display the first 10 lines of this file.
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 5 minutes on your computer, then abort the program and report your findings. 

```{r eval=FALSE}
# Attempt to read the compressed CSV file
start.time <- Sys.time()
labevents <- read_csv("labevents.csv.gz")
end.time <- Sys.time()

# Calculate the time taken
time_taken <- end.time - start.time
print(time_taken)


```

It takes very long to run the code

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

```{r eval=FALSE}


# Define the columns you want to select
columns_to_select <- c("subject_id", "itemid", "charttime", "valuenum")

# Read the file, selecting only the specified columns
labevents_subset <- read_csv("labevents.csv.gz", col_select = columns_to_select)

```

It is still very slow to indest the file, didn't solve the problem

### Q2.3 Ingest subset of `labevents.csv.gz`

<p align="center">
  <img src="./linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. To save render time, put `#| eval: false` at the beginning of this code chunk.)

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?


```{bash}


zcat labevents.csv.gz | awk -F, 'BEGIN {OFS=","} NR==1 || $5 ~ /^(50912|50971|50983|50902|50882|51221|51301|50931)$/ {print $2,$5,$7,$10}' | gzip > labevents_filtered.csv.gz


```

```{bash}

zcat< labevents_filtered.csv.gz | head -10


```
This is the first 10 lines

```{bash}
zcat labevents_filtered.csv.gz | wc -l

```
There are 24855910 lines in the new file.
```{r}
start.time <- Sys.time()
labevents_filtered <- read_csv("labevents_filtered.csv.gz")
end.time <- Sys.time()

time_taken <- end.time - start.time
print(time_taken)


```
It takes 5.10secs to ingest the file

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory. To save render time, put `#| eval: false` at the beginning of this code chunk.

```{bash, eval=FALSE}

gzip -d labevents.csv.gz

```

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}

# Adjust the path to where labevents.csv is located
labevents_dataset <- arrow::open_dataset("labevents.csv", format = "csv")

# Define the specific item IDs you're interested in
item_ids <- c("50912", "50971", "50983", "50902", "50882", "51221", "51301", "50931")

# Use dplyr to filter and select the relevant columns
filtered_data <- labevents_dataset %>%
  filter(itemid %in% item_ids) %>%
  select(subject_id, itemid, charttime, valuenum)

# Collect the result into memory (if feasible) and view the first 10 rows
result <- filtered_data %>% collect()
head(result, 10)

```
They match the output of 2.3.


Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 


Apache Arrow is like a high-speed train for data. Imagine you have to get a lot of people (data) from one city (application) to another quickly and efficiently. Normally, roads (traditional data formats) can cause traffic jams because they're not designed for speed or large volumes. Apache Arrow, on the other hand, is like a super-fast train track that connects different cities (applications, databases, and programming languages). It allows data to travel at high speeds without getting bogged down, making it much easier and quicker for different programs to talk to each other and handle large amounts of data smoothly. So, it's all about moving data fast and efficiently, saving time and avoiding headaches.








### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}



# Assuming labevents.csv is already in your working directory
csv_file <- "labevents.csv"
parquet_file <- "labevents.parquet"

# Read the CSV file
labevents_dataset <- arrow::open_dataset(csv_file, format = "csv")

# Write the dataset to a Parquet file
arrow::write_dataset(labevents_dataset, parquet_file, format = "parquet")


```

```{r}

file.info(parquet_file)$size


```


```{r}
# Open the Parquet dataset
parquet_dataset <- arrow::open_dataset(parquet_file)

# Filter and select as per Q2.3 requirements
filtered_data <- parquet_dataset %>%
  filter(itemid %in% c("50912", "50971", "50983", "50902", "50882", "51221", "51301", "50931")) %>%
  select(subject_id, itemid, charttime, valuenum)

# Collect the result (considering it fits in memory)
result <- filtered_data %>% collect()
# Display the number of rows
nrow(result)



# Display the first 10 rows
head(result, 10)


```

It is the same as 2.3


Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.


Imagine you have a bookshelf full of photo albums, but instead of organizing the photos by event or date, you organize them by the type of photo—like all the beach photos together, all the birthday photos together, and so on. The Parquet format does something similar with data. It's a way of storing data that makes it really fast and easy to pull out just the information you need without having to go through everything else. This means when computers work with data in Parquet format, they can quickly find and use just the bits they need, saving time and energy. It's like being able to instantly grab all your beach vacation photos when you want to reminisce about the sun and sand, without having to flip through every album on the shelf.


### Q2.6 DuckDB

<p align="center">
  <img src="./duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}
library(arrow)
library(duckdb)
library(dplyr)

start.time <- Sys.time()
parquet_dataset <- arrow::open_dataset("labevents.parquet", format= "parquet")

# Create a DuckDB connection
con <- dbConnect(duckdb::duckdb())

# Use Arrow's integration with DuckDB to register the dataset for querying
# Note: Adjust this step based on the method that fits your workflow and versions
labevents_duck<-arrow::to_duckdb( parquet_dataset,con)

# Now, you can perform your dplyr operations
result <- labevents_duck %>%
  filter(itemid %in% c("50912", "50971", "50983", "50902", "50882", "51221", "51301", "50931")) %>%
  select(subject_id, itemid, charttime, valuenum) %>%
  collect()
end.time <- Sys.time()

# After your operations, display the result
print(head(result, 10))

time_taken <- end.time - start.time
print(time_taken)

```



Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```
In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 



```{bash}


zcat chartevents.csv.gz  | awk -F, 'BEGIN {OFS=","} NR==1 || $7 ~ /^(220045|220181|220179|223761|220210)$/ {print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11}' | gzip > chartevents_filtered_vitals.csv.gz



```



```{bash}

zcat< chartevents_filtered_vitals.csv.gz | head -10

```

This is the first 10 rows of the document.


Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.



```{bash}
zcat chartevents_filtered_vitals.csv.gz | wc -l
```
There are 22502320 rows



